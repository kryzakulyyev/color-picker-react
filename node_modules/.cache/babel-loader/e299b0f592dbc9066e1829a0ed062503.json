{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/macpro2020/Desktop/web_dev/Class_Practis/React/weekly-projcts/09-Color Picker-Project/src/components/ColorPicker.js\";\nimport React from 'react';\nimport { Button } from './Button';\n\nclass ColorPicker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: [42, 25, 146]\n    };\n    this.applyColor = this.applyColor.bind(this);\n    this.chooseColor = this.chooseColor.bind(this);\n  }\n\n  componentDidMount() {\n    console.log('i invoked immediately after component is mounted, just one time at the beginning; after render method');\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log('i invoked immediately after updating occurs, upon every change.');\n    this.applyColor();\n  }\n\n  isLight(colorArr) {\n    return colorArr.reduce((a, b) => a + b) < 127 * 3; // it returns true or false;\n  }\n\n  formatColor(colorArr) {\n    return 'rgb(' + colorArr.join(', ') + ')'; // it returns rgb format of color;\n  }\n\n  applyColor() {\n    this.chooseColor();\n    document.querySelector('body').style.backgroundColor = this.formatColor(this.state.color);\n  }\n\n  chooseColor() {\n    let red = Math.floor(Math.random() * 256);\n    let green = Math.floor(Math.random() * 256);\n    let blue = Math.floor(Math.random() * 256);\n    return this.setState({\n      color: [red, green, blue]\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: this.isLight(this.state.color) ? 'black' : 'white',\n        children: [\"Your color is \", this.formatColor(this.state.color), \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: this.applyColor,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Hi, im color picker\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ColorPicker;","map":{"version":3,"sources":["/Users/macpro2020/Desktop/web_dev/Class_Practis/React/weekly-projcts/09-Color Picker-Project/src/components/ColorPicker.js"],"names":["React","Button","ColorPicker","Component","constructor","props","state","color","applyColor","bind","chooseColor","componentDidMount","console","log","componentDidUpdate","prevProps","prevState","isLight","colorArr","reduce","a","b","formatColor","join","document","querySelector","style","backgroundColor","red","Math","floor","random","green","blue","setState","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,UAAvB;;AAEA,MAAMC,WAAN,SAA0BF,KAAK,CAACG,SAAhC,CAA0C;AACxCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAY;AACVC,MAAAA,KAAK,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,GAAT;AADG,KAAZ;AAIA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAsB,IAAtB,CAAlB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAuB,IAAvB,CAAnB;AACD;;AAEDE,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,uGAAZ;AAED;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACvCJ,IAAAA,OAAO,CAACC,GAAR,CAAY,iEAAZ;AACA,SAAKL,UAAL;AACD;;AAEDS,EAAAA,OAAO,CAACC,QAAD,EAAW;AAChB,WAAOA,QAAQ,CAACC,MAAT,CAAgB,CAACC,CAAD,EAAGC,CAAH,KAASD,CAAC,GAACC,CAA3B,IAAgC,MAAM,CAA7C,CADgB,CACiC;AAClD;;AAEDC,EAAAA,WAAW,CAACJ,QAAD,EAAW;AACpB,WAAO,SAASA,QAAQ,CAACK,IAAT,CAAc,IAAd,CAAT,GAA+B,GAAtC,CADoB,CACyB;AAC9C;;AAEDf,EAAAA,UAAU,GAAG;AACX,SAAKE,WAAL;AACEc,IAAAA,QAAQ,CAACC,aAAT,CAAuB,MAAvB,EAA+BC,KAA/B,CAAqCC,eAArC,GAAuD,KAAKL,WAAL,CAAiB,KAAKhB,KAAL,CAAWC,KAA5B,CAAvD;AACH;;AAEDG,EAAAA,WAAW,GAAG;AACZ,QAAIkB,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,GAAzB,CAAV;AACA,QAAIC,KAAK,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,GAAzB,CAAZ;AACA,QAAIE,IAAI,GAAGJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,GAAzB,CAAX;AACA,WACE,KAAKG,QAAL,CAAc;AACZ3B,MAAAA,KAAK,EAAE,CAACqB,GAAD,EAAMI,KAAN,EAAaC,IAAb;AADK,KAAd,CADF;AAKD;;AAMDE,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AAAI,QAAA,SAAS,EAAE,KAAKlB,OAAL,CAAa,KAAKX,KAAL,CAAWC,KAAxB,IAAgC,OAAhC,GAAyC,OAAxD;AAAA,qCACW,KAAKe,WAAL,CAAiB,KAAKhB,KAAL,CAAWC,KAA5B,CADX;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAI,KAAKC,UAAxB;AAAA,+BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AA5DuC;;AA+D1C,eAAeN,WAAf","sourcesContent":["import React from 'react';\nimport { Button } from './Button';\n\nclass ColorPicker extends React.Component {\n  constructor(props){\n    super(props)\n    this.state ={\n      color: [42, 25, 146]\n\n    }\n    this.applyColor = this.applyColor.bind( this );\n    this.chooseColor = this.chooseColor.bind( this )\n  } \n\n  componentDidMount() {\n    console.log('i invoked immediately after component is mounted, just one time at the beginning; after render method')\n    \n  }\n  \n  componentDidUpdate(prevProps, prevState) {\n    console.log('i invoked immediately after updating occurs, upon every change.')\n    this.applyColor() \n  }\n\n  isLight(colorArr) {\n    return colorArr.reduce((a,b) => a+b) < 127 * 3;  // it returns true or false;\n  }\n\n  formatColor(colorArr) {\n    return 'rgb(' + colorArr.join(', ') + ')';   // it returns rgb format of color;\n  }\n     \n  applyColor() {\n    this.chooseColor()\n      document.querySelector('body').style.backgroundColor = this.formatColor(this.state.color)\n  }\n\n  chooseColor() {\n    let red = Math.floor(Math.random()*256);\n    let green = Math.floor(Math.random()*256);\n    let blue = Math.floor(Math.random()*256);\n    return (\n      this.setState({\n        color: [red, green, blue]\n      })\n    )\n  }\n  \n\n \n\n\n  render() {\n    return (\n      <div>\n        <h1 className={this.isLight(this.state.color)? 'black': 'white'}>\n    Your color is {this.formatColor(this.state.color)}!\n        </h1>\n        <Button onClick = {this.applyColor} >\n          <p>Hi, im color picker</p>\n        </Button>\n      </div> \n    );\n  }\n}\n\nexport default ColorPicker;\n"]},"metadata":{},"sourceType":"module"}